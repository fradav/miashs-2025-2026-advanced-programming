---
title: "IPC and Locking"
---

```{python}
#| echo: false
from multiprocessing import spawn
from multiprocessing.spawn import get_preparation_data as __get_preparation_data
def __patched_get_preparation_data(name):
    import sys
    main_mod = sys.modules['__main__']
    main_path = getattr(main_mod, '__file__', None)
    setattr(main_mod, '__file__', None)
    data = __get_preparation_data(name)
    setattr(main_mod, '__file__', main_path)
    return data
spawn.get_preparation_data = __patched_get_preparation_data
del spawn
import sys
from multiprocessing.reduction import ForkingPickler
from types import FunctionType
import cloudpickle

def reducer_override(obj):
    if type(obj) is FunctionType:
        return (cloudpickle.loads, (cloudpickle.dumps(obj),))
    else:
        return NotImplemented

ForkingPickler.reducer_override = staticmethod(reducer_override)
```

# Streaming (pipelining) data

Sticking to our favorite hobby, which is finding prime numbers, this time, we'll use a different strategy.

Instead of partitioning the data from scratch, we will continuously *feed* workers from our multiprocessing pool with small size chunk of numbers and the workers send us back the the primes they found on those chunks.

We need two queues : one for the chunks of numbers that's the *INPUT*

Another one for the results sent that's the *OUTPUT*

<pre style="font-size:0.4em">
                                                              ┌──────────────┐
                                                              │              │
                                                              │              │
                           ┌─────────────────────────────────►│   Worker 1   ├───────────────────────────────────┐
                           │                                  │              │                                   │
                           │                                  │              │                                   │
                           │                                  └──────────────┘                                   │
                           │                                                                                     │
                           │                                  ┌──────────────┐                                   │
                           │                                  │              │                                   │
                           │                                  │              │                                   │
                           │                    ┌────────────►│   Worker 2   ├───────────────────────────────────┼────────────────────┐
                           │                    │             │              │                                   │                    │
                           │                    │             │              │                                   │                    │
              ┌──────┐  ┌──┴───┐  ┌──────┐  ┌───┴──┐          └──────────────┘                      ┌──────┐  ┌──▼───┐  ┌──────┐  ┌───▼──┐
...           │Chunk4│  │Chunk3│  │Chunk2│  │Chunk1│                                 ...            │Res. 4│  │Res. 3│  │Res. 2│  │Res. 1│
              └───┬──┘  └──────┘  └───┬──┘  └──────┘          ┌──────────────┐                      └───▲──┘  └──────┘  └───▲──┘  └──────┘
                  │                   │                       │              │                          │                   │
                  │                   │                       │              │                          │                   │
                  │                   └──────────────────────►│   Worker 3   ├──────────────────────────┼───────────────────┘
                  │                                           │              │                          │
                  │                                           │              │                          │
                  │                                           └──────────────┘                          │
                  │                                                                                     │
                  │                                           ┌──────────────┐                          │
                  │                                           │              │                          │
                  │                                           │              │                          │
                  └──────────────────────────────────────────►│   Worker 4   ├──────────────────────────┘
                                                              │              │
                                                              │              │
       ──────────────────────────────────────────►            └──────────────┘               ──────────────────────────────────────────►

                      INPUT                                                                               OUTPUT
</pre>

Let's revive our old `check_prime` function back from the dead...

```{python}
import math

def check_prime(n):
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True
```

Let's get back the chunk generator, too.

```{python}
def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
```

Now we want to use a *producer/consumer* model, where each process got :

- an _input_ queue for receiving chunks of numbers
- an _output_ queue for sending back a list of all primes found in the _input_ queue.

Both _input_ and _output_ elements are *lists* (or even python iterables for the input). 
We'll use `None` as a terminating element in the queue.

## Queue Worker Function

Create a *worker* function, which takes as the _input_ and _output_ queues as argument. 

For each element in the _input_ queue, which is a list of numbers, get the primes (as a list).
Put the list of found primes to the _output_ queue.

```python
def find_prime_worker(input, output):
    for chunk in iter(input.get,None):
        primes_found = ...
        output.put(primes_found)
```

## Test  the worker function

1. Manually allocate the _input_ and _output_ queues (we use managed queues)
2. Put some chunks of numbers in the _input_ queue (don't forget to terminate the queue with `None`)
3. Launch the worker function on the queues and terminate the output queue with `None`.
4. Collect the results in a unified list.

## Some Tools

### Iterate on a queue

To make a queue terminated by `None` iterable use the [`iter`](https://docs.python.org/3/library/functions.html#iter) function : 
```python
iter(queue.get,None)
```

### Collect a list of list


To collect a list of list use the [`chain`](https://docs.python.org/3/library/itertools.html#itertools.chain) function from `itertools` :
```python
chain(*list_of_list)
```

### Reminder

Iterables are lazy in python, to actually make a list you have to force a `list()` of them.
```python
list(iterables)
```

### Worker function

```{python}
#| tags: [solution]
import time

def find_prime_worker(input, output):
    t0 = time.time()
    for chunk in iter(input.get,None):
        primes_found = list(filter(check_prime,chunk))
        output.put(primes_found)
    # print the time taken by the worker in seconds and two decimal places
    print(f"Worker done in {time.time()-t0:.2f}s")
    return
```

### 1. Allocations

```{python}
#| tags: [solution]
from multiprocessing import Manager

manager = Manager()
input = manager.Queue()
output = manager.Queue()
```

### 2. Some chunk in the input

```{python}
#| tags: [solution]
input.put(range(2,100))
input.put(range(1000,2000))
input.put(None)
```

### 3. Launch the worker and terminate the output

```{python}
#| tags: [solution]
find_prime_worker(input,output)
output.put(None)
```

### 4. Collect the results

```{python}
#| tags: [solution]
from itertools import chain

list(chain(*list(iter(output.get,None))))
```

# Putting the workers to... work.

make a function which allocates the queues, and use a `Pool(ncores)` of worker.

```python
def calculate_primes(ncores,N,chunksize):
    ...
```

- `ncores` is the number of workers (and will be aligned with the number of cores you got, 8 for example)
- `N` is the upper limit of the primes we want to find 
- `chunksize` is the size of the chunks we'll send to process to workers.

## The main process

1. First we'll use a [`starmap_async`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap_async) for our main dispatcher function (don't use the `chunksize` optional argument of the function) 
2. Feed the input queue with all chunks from the `chunks(range(1,N),chunksize)`
3. Terminate the _input_ queue (`ncores * None`, one for each worker)
4. Wait for the workers to finish
5. Collect and return the results

Test and benchmark it on a `int(N/64)` chunk size
```python
N = 5000000
```

## Solution for main process function

```{python}
#| tags: [solution]
from multiprocessing import Pool,Manager
from itertools import chain

def calculate_primes(ncores,N):
    with Manager() as manager:
        input = manager.Queue()
        output = manager.Queue()

        with Pool(ncores) as p:
            it = p.starmap_async(find_prime_worker,[(input,output)]*ncores)
            for r in chunks(range(1,N),int(N/ncores)):
                input.put(r)
            for i in range(ncores): input.put(None)
            it.wait()
            output.put(None)

        res = list(chain(*list(iter(output.get,None))))
    return res
```

### Test of the main function

```{python}
N = 10000000
```

```{python}
#| tags: [solution]
%timeit -r 1 -n 1 calculate_primes(8,N)
```

## Autosizing chunks ! (optional)

We know that greater the number is, longer it is to check if it is a prime.

A slight optimization to our multi-processing/queued algorithm is to make the chunks smaller and smaller with greater numbers chunks.

1. Try to modify the `chunks` function to take this into account, test the function.
2. Modify the `calculate_primes_chunks` to use this function
3. Test and benchmark it.

###  autosizing chunks example function

:::solution
If the time to check if a number is prime at most proportional to the square root of the number, we can make the hypothesis that the mean real time for the check is a “lower” power law than the square root, something like $O(N^{p)$ where $p < \frac{1}{2}$. So the time of checking all numbers to `N` is proportional to the integral function of this power root which is (up to a constant) $N^{1+p}$. We can infer a method to balance the chunks size with the number of workers.

:::

```{python}
#| tags: [solution]
def chunks_rsquared(lst, n):
    """Yield successive n-sized chunks with n recursively root-squared."""
    i = 0
    rsq = 1 + 0.3 # empirical value for the power law
    while (i < len(lst)):
        yield lst[i:i + n]
        im = i
        i = i + n
        ip = (2 * (i ** rsq) - (im ** rsq)) ** (1/rsq)
        n = max(1,int((ip-i)))
```

```{python}
#! tags: [solution]
def find_start_chunk(lst,n):
    for i in range(2,n+1):
        res = list(chunks_rsquared(lst,int(len(lst)/i)))
        if len(res) >= n:
            return res
```
### Test it

```{python}
#| tags: [solution]
list(chunks_rsquared(range(1,100),50))
```


```{python}
#| tags: [solution]
find_start_chunk(range(1,100),10)
```

### Modify the main worker process function

```{python}
#| tags: [solution]
def calculate_primes_chunks_rsquared(ncores,N):
    with Manager() as manager:
        input = manager.Queue()
        output = manager.Queue()

        with Pool(ncores) as p:
            it = p.starmap_async(find_prime_worker,[(input,output)]*ncores)
            for r in find_start_chunk(range(1,N),ncores):
                input.put(r)
            for i in range(ncores): input.put(None)
            it.wait()
            output.put(None)

        res = list(chain(*list(iter(output.get,None))))
    return res
```

### Test and benchmark it

```{python}
#| tags: [solution]
%timeit -r 1 -n 1 calculate_primes_chunks_rsquared(8,N)
```

This gives a better balance between the workers and the chunks size.
